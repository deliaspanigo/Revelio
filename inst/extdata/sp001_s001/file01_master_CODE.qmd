---
title: "My Document"
knitr:
  opts_chunk:
    dpi: 600
    message: FALSE
    warning: FALSE
    echo: TRUE
    eval: TRUE
    cache: FALSE
    comment: ">"
    tidyverse-quiet: TRUE
format:
  html:
    theme: 
      light: cerulean 
      dark: cyborg
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    code-fold: show
    code-overflow: scroll
    code-line-numbers: false
    code-link: true
    code-copy: true
    code-tools: true
    self-contained: true
    smooth-scroll: true 
---

Written by David Elías Panigo [`r fontawesome::fa(name = "link")`](https://jeremy-selva.netlify.app/){target="_blank"} [`r fontawesome::fa(name = "linkedin")`](https://www.linkedin.com/in/deliaspanigo/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/deliaspanigo/){target="_blank"} [`r fontawesome::fa(name = "fab fa-x-twitter")`](https://twitter.com/JauntyJJS){target="_blank"}


<br>
<br>
![Elephant01](logo_01_unc_master.png){width=150}
![Elephant02](logo_02_fcefyn_master.png){width=150}
![Elephant03](logo_03_efadoc_master.png){width=150}
![Elephant04](logo_04_rscience_master.png){width=140}



```{r,  include =FALSE}

database <- mtcars # as.data.frame(params$database)
selected_name_var01 <- "cyl" #params$selected_name_var01
mis_categorias <- levels(as.factor(database[,selected_name_var01]))
mis_colores <- rainbow(length(mis_categorias))

```


```{r chunk_rcode, include =T, eval = T, class.source="bg-success"}
### Section 01 of 15 - Libraries
library("stats")      # General Linear Models, Shapiro test and Bartlett test.
library("agricolae")  # Tukey test
library("gplots")     # Graphics 
library("plotly")
library("openxlsx")


### Section 02 of 15 - Load database
database


### Section  04 de 15 - Var selection

# Name for each selected var

selected_name_var01 <- selected_name_var01



### Section 04 of 15 - Var selection

vector_all_var_names <- colnames(database)
vector_rol_vars <- c("Qualitative")


# # # Selected vars info as dataframe
df_selected_vars <- data.frame(
  "order" = 1,
  "var_name" = selected_name_var01,
  "var_number" = match(selected_name_var01, vector_all_var_names),
  "var_letter" = openxlsx::int2col(match(selected_name_var01, vector_all_var_names)),
  "var_role" = vector_rol_vars,
  "doble_reference" = paste0(vector_rol_vars, "(", selected_name_var01, ")")
)
df_selected_vars


### Section 04 of 15 - Var selection


# Definir el nuevo orden de los niveles usando un vector con los niveles ordenados
nuevo_orden_categorias <- mis_categorias
nuevo_orden_categorias

# Cambiar el orden de los niveles del factor
database[,selected_name_var01] <- factor(database[,selected_name_var01], levels = nuevo_orden_categorias)



### Section  05 de 15 - minibase

# Selected vars with full data on rows only
minibase <- na.omit(database[selected_name_var01])

# Factor must be a factor on R enviroment.
#minibase[,selected_name_var01] <- as.factor(as.character(minibase[,selected_name_var01]))

# Show first 5 rows
head(x=minibase, n=5)

# Info
df_show_n <- data.frame(
  "object" = c("database", "minibase"),
  "n_col" = c(ncol(database), ncol(minibase)),
  "n_row" = c(nrow(database), nrow(minibase))
)
df_show_n




# Calcular las frecuencias absolutas
# Calcular las frecuencias absolutas
original_table <- table(minibase[,selected_name_var01])
vector_frec_abs <- as.vector(original_table)
vector_n <- rep(sum(vector_frec_abs), length(vector_frec_abs))
vector_frec_quotient <- paste0(vector_frec_abs, "/", vector_n)
vector_frec_rel <- vector_frec_abs/vector_n
vector_porc01 <- vector_frec_rel * 100
vector_porc02 <- paste0(vector_porc01, "%")

# Combinar los resultados en una tabla
df_freq_table01 <- data.frame(
  Category = names(original_table),
  Absolute_Freq = vector_frec_abs,
  n = vector_n,
  Quotient = vector_frec_quotient, 
  Relative_Freq = vector_frec_rel,
  Percentage = vector_porc01,
  Percentage2 = vector_porc02,
  Color = mis_colores
)

df_freq_table01[,"Category"] <- factor(df_freq_table01[,"Category"], levels = df_freq_table01[,"Category"])

df_freq_table01

vector_frec_abs_acum <- cumsum(vector_frec_abs)
vector_frec_quotient_acum <- paste0(vector_frec_abs_acum, "/", vector_n)
vector_frec_rel_acum <- vector_frec_abs_acum / vector_n
vector_porc01_acum <- vector_frec_rel_acum * 100
vector_porc02_acum <- paste0(vector_porc01_acum, "%")

# Combinar los resultados en una tabla
df_freq_table02 <- data.frame(
  Category = names(original_table),
  Absolute_Freq_Acum = vector_frec_abs_acum,
  n = vector_n,
  Quotient_Acum = vector_frec_quotient_acum,
  Relative_Freq_Acum = vector_frec_rel_acum,
  Percentage_Acum = vector_porc01_acum,
  Percentage2_Acum = vector_porc02_acum,
  Color = mis_colores
)

df_freq_table02

# Plot001 
selected_col01 <- 2
plot001 <- plot_ly(
  data = df_freq_table01,
  x = ~Category,
  y = ~Absolute_Freq,
  type = 'bar',
  marker = list(color = ~Color,
                line = list(color = 'rgba(55, 128, 191, 1.0)', width = 2))
) %>%
  layout(
    title = "Frecuencias Absolutas por Categoría",
    xaxis = list(title = selected_name_var01),
    yaxis = list(title = colnames(df_freq_table01)[selected_col01])
  )

# Mostrar el gráfico
plot001

# Plot002 
selected_col02 <- 5
plot002 <- plot_ly(
  data = df_freq_table01,
  x = ~Category,
  y = ~Relative_Freq,
  type = 'bar',
  marker = list(color = ~Color,
                line = list(color = 'rgba(55, 128, 191, 1.0)', width = 2))
) %>%
  layout(
    title = "Frecuencias Relativas por Categoría",
    xaxis = list(title = selected_name_var01),
    yaxis = list(title = colnames(df_freq_table01)[selected_col02])
  )

# Mostrar el gráfico
plot002

# Plot003 
selected_col03 <- 6
plot003 <- plot_ly(
  data = df_freq_table01,
  x = ~Category,
  y = ~Percentage,
  type = 'bar',
  marker = list(color = ~Color,
                line = list(color = 'rgba(55, 128, 191, 1.0)', width = 2))
) %>%
  layout(
    title = "Porcentajes por Categoría",
    xaxis = list(title = selected_name_var01),
    yaxis = list(title = colnames(df_freq_table01)[selected_col03])
  )

# Mostrar el gráfico
plot003





# Crear un gráfico de tortas con plotly
plot004 <- plot_ly(
  data = df_freq_table01,
  labels = ~Category,
  values = ~Absolute_Freq,
  type = 'pie',
  marker = list(colors = df_freq_table01$Color,
                line = list(color = '#FFFFFF', width = 1))
) %>%
  layout(
    title = 'Frecuencias Absolutas por Categoría',
    xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
    yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)
  )

# Mostrar el gráfico
plot004

# Crear un gráfico de donut con plotly
plot005 <- plot_ly(
  data = df_freq_table01,
  labels = ~Category,
  values = ~Absolute_Freq,
  type = 'pie',
  hole = 0.6,
  marker = list(colors = df_freq_table01$Color,
                line = list(color = '#FFFFFF', width = 1))
) %>%
  layout(
    title = "Donut Plot Using R",
    showlegend = TRUE
  )

# Mostrar el gráfico
plot005
```




```{r,  include =FALSE}
# Empaquetar todos los objetos en una lista
entorno <- mget(ls())

# Guardar la lista como un archivo RDS
saveRDS(entorno, file = "entorno_completo.rds")
```

